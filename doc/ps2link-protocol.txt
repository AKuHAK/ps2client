
                     --------------------------------
                      PS2LINK OPERATION AND PROTOCOL
                        Dan Peori (peori@oopo.net)
                       Current as of: ps2link v1.22
                     --------------------------------

  Communication with ps2link takes place on three ports. I'm not entirely
  sure why, but it does. One udp port is used to send commands to ps2link
  in the form of command packets. A tcp port is used to receive requests
  and send responses during program runtime. And another udp port is used
  to receive log text from ps2link for debug or informational purposes.

   PS2LINK PORT NUMBERS

    Command (UDP) 0x4712 - One way communication to send commands.
    Host (TCP) 0x4711 - Two way communication to serve requests.
    Log (UDP)     0x4712 - One way communication to receive log text.

  Typical operation is to send a command, then enter a loop that waits for
  requests and log text from ps2link. If at any time contact is lost with
  ps2link, close and exit. Extra points are given if you close the command
  port during the loop to allow other commands to be sent to ps2link while
  your client is handling requests.

 -------------------------
  PS2LINK COMMAND PACKETS
 -------------------------

  When ps2link is finished booting, it waits for a command from a client to
  tell it what to do. These are simple commands sent as single packets for
  executing programs, resetting ps2link or other things. This list may grow
  as time goes on and new functionality is added to ps2link.

  ----------------------------
   0xBABE0201 (reset command)
  ----------------------------

   Tell ps2link to reset and reload back to its information screen.

   PACKET STRUCTURE

    struct { int number; short length; } command;

   PACKET CONTENTS

    command.number = htonl(0xBABE0201);
    command.length = htons(sizeof(command));

  ------------------------------
   0xBABE0202 (execiop command)
  ------------------------------

   Tell ps2link to load and run the given program (IRX) on the IOP.

   PACKET STRUCTURE

    struct { int number; short length; int argc; char argv[256]; } command;

   PACKET CONTENTS

    command.number = htonl(0xBABE0202);
    command.length = htons(sizeof(command));
    command.argc   = htonl(argc);
    if (argv) { memcpy(command.argv, argv, 256); }

  -----------------------------
   0xBABE0203 (execee command)
  -----------------------------

   Tell ps2link to load and run the given program (ELF) on the EE.

   PACKET STRUCTURE

    struct { int number; short length; int argc; char argv[256]; } command;

   PACKET CONTENTS

    command.number = htonl(0xBABE0203);
    command.length = htons(sizeof(command));
    command.argc   = htonl(argc);
    if (argv) { memcpy(command.argv, argv, 256); }

  -------------------------------
   0xBABE0204 (poweroff command)
  -------------------------------

   Tell ps2link to power off the PS2.

   PACKET STRUCTURE

    struct { int number; short length; } command;

   PACKET CONTENTS

    command.number = htonl(0xBABE0204);
    command.length = htons(sizeof(command));

  ------------------------------
   0xBABE0207 (dumpmem command)
  ------------------------------

   Tell ps2link to dump memory starting at offset and of size bytes into
   the file specified by pathname.

   PACKET STRUCTURE

    struct { int number; short length; int offset, size; char pathname[256]; } command;

   PACKET CONTENTS

    command.number = htonl(0xBABE0207);
    command.length = htons(sizeof(command));
    command.offset = htonl(offset);
    command.size   = htonl(size);
    if (pathname) { strncpy(command.pathname, pathname, 256); }

  ------------------------------
   0xBABE0208 (startvu command)
  ------------------------------

   Tell the specified vector unit to start operation.

   PACKET STRUCTURE

    struct { int number; short length; int vu; } command;

   PACKET CONTENTS

    command.number = htonl(0xBABE0208);
    command.length = htons(sizeof(command));
    command.vu     = htonl(vu);

  -----------------------------
   0xBABE0209 (stopvu command)
  -----------------------------

   Tell the specified vector unit to stop operation.

   PACKET STRUCTURE

    struct { int number; short length; int vu; } command;

   PACKET CONTENTS

    command.number = htonl(0xBABE0209);
    command.length = htons(sizeof(command));
    command.vu     = htonl(vu);

  ------------------------------
   0xBABE020A (dumpreg command)
  ------------------------------

   Tell ps2link to dump the specified register type into the file specified
   by pathname.

   PACKET STRUCTURE

    struct { int number; short length; int type; char pathname[256]; } command;

   REGISTER TYPES

    DMAC (0), INTC (1), Timer (2), GS (3), SIF (4), FIFO (5), GIF (6),
    VIF0 (7), VIF1 (8) IPU (9), all registers (10), VU0 (11), VU1 (12)

   PACKET CONTENTS

    command.number = htonl(0xBABE020A);
    command.length = htons(sizeof(command));
    command.type   = htonl(type);
    if (pathname) { strncpy(command.pathname, pathname, 256); }

  -----------------------------
   0xBABE020B (gsexec command)
  -----------------------------

   Tell ps2link to load and send the file specified by pathname to the GS.

   PACKET STRUCTURE

    struct { int number; short length; int size; char pathname[256]; } command;

   PACKET CONTENTS

    command.number = htonl(0xBABE020B);
    command.length = htons(sizeof(command));
    command.size   = htonl(size);
    if (pathname) { strncpy(command.pathname, pathname, 256); }

 ---------------------
  PS2LINK LOG PACKETS
 ---------------------

  Any data received from the log port from ps2link is meant to be displayed
  to the user via a simple printf. There is no special processing required
  or any packet format - just output to the screen.
